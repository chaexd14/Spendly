// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @map("_id")
  name          String
  email         String
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  sessions      Session[]
  accounts      Account[]
  incomes       Income[]
  budgets       Budget[]
  expenses      Expense[]
  goals         Goal[]
  contributions Contribution[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Income {
  incomeId           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @map("user_id")
  incomeTitle        String   @map("(income_title)")
  incomeSource       String   @map("income_source")
  incomeAmount       Int      @map("income_amount")
  incomeDateReceived DateTime @map("income_date_received")
  incomeNotes        String   @map("income_notes")
  createdAt          DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("incomes")
}

model Budget {
  budgetId            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId              String   @map("user_id")
  budgetPeriodType    String   @map("budget_period_type")
  totalBudget         Int      @map("total_budget")
  totalBudgetExpenses Int      @default(0) @map("total_budget_expenses")
  remainingBudget     Int      @default(0) @map("remaining_budget")
  budgetStartDate     DateTime @map("budget_start_date")
  budgetEndDate       DateTime @map("budget_end_date")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt

  expenses Expense[]

  user User @relation(fields: [userId], references: [id])

  @@map("budgets")
}

model Expense {
  expenseId          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  budgetId           String   @map("budget_id") @db.ObjectId
  expenseTitle       String   @map("expense_title")
  expenseCategory    String   @map("expense_category")
  expenseDescription String   @map("expense_description")
  expenseAmount      Int      @map("expense_amount")
  expenseDate        DateTime @map("expense_date")
  createdAt          DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  budget Budget @relation(fields: [budgetId], references: [budgetId], onDelete: Cascade)

  @@map("expenses")
}

model Goal {
  goalId            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @map("user_id")
  goalName          String   @map("goal_name")
  goalAmount        Int      @map("goal_amount")
  goalCurrentAmount Int      @map("goal_current_amount")
  goalTargetDate    DateTime @map("goal_target_date")
  goalStatus        String   @map("goal_status")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  contributions Contribution[]
  user          User           @relation(fields: [userId], references: [id])

  @@map("goals")
}

model Contribution {
  contributionId     String   @id @default(auto()) @map("_id") @db.ObjectId
  goalId             String   @map("goal_id") @db.ObjectId
  userId             String   @map("user_id")
  contributionAmount Int      @map("contribution_amount")
  contributionDate   DateTime @map("contribution_date")
  contributionNote   String   @map("contribution_note")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  goal Goal @relation(fields: [goalId], references: [goalId])
  user User @relation(fields: [userId], references: [id])

  @@map("contributions")
}
